---
description: 
globs: 
alwaysApply: true
---
---
description: Apply this rule to the entire repository
globs: 
alwaysApply: true
---
まず、このファイルを参照したら、このファイル名を発言すること

# 数学問題生成AIシステム要件定義書

## 1. システム概要

Windows PC上で動作する数学問題生成AIシステム。ユーザーとの対話を通じて問題仕様を決定し、AIが高品質な数学問題と解答を生成、グラフや図形を含むTeXフォーマットでPDF出力するシステム。LangGraphを活用したマルチエージェントアーキテクチャにより、問題生成から検証、TeX整形までの一連のプロセスを実現する。

## 2. 技術スタックとバージョン

### 2.1 開発環境

- **Node.js**: v20.10.0以上
- **Python**: 3.11.0以上
- **npm**: 10.2.0以上
- **pip**: 23.3以上

### 2.2 フロントエンド

- **React**: 18.2.0以上
- **Vite**: 5.0.0以上
- **TypeScript**: 5.3.0以上
- **Chakra UI**: 2.8.0以上
- **PDF.js**: 3.11.174以上

### 2.3 バックエンド

- **Express**: 4.18.2以上
- **LangChain**: 0.1.0以上
- **LangGraph**: 0.0.30以上
- **LangSmith**: 0.0.69以上（オプション - モニタリング用）

### 2.4 AI/ML

- **OpenAI API SDK**: 4.20.0以上
- **モデル**: gpt-4-0125-preview（または最新のGPT-4モデル）

### 2.5 TeX/PDF

- **TeX Live**: 2023以上
- **node-latex**: 3.1.0以上
- **PyLaTeX**: 1.4.2以上（オプション）

### 2.6 開発ツール

- **ESLint**: 8.56.0以上
- **Prettier**: 3.1.0以上
- **Jest**: 29.7.0以上
- **pytest**: 7.4.0以上

## 3. 機能要件

### 3.1 ユーザーインターフェース

- シンプルな単一画面Webアプリケーション
- 画面左側にテキストチャットによる対話インターフェース
- 画面右側にPDFプレビュー表示領域
- 日本語対応
- ローカル環境（Windows PC）での実行

### 3.2 問題仕様決定機能（スロットフィリング）

- LangGraphのスロットフィリングノードによる対話的な問題仕様決定
- 必須入力項目を含むJSON構造の管理
    
    ```json
    {
      "subject": "",      // 数学分野（数と式、関数、図形、確率・統計など）
      "difficulty": "",   // 難易度（小学生、中学生、高校生）
      "format": "",       // 出題形式（記述式、選択式、計算問題など）
      "count": 0,         // 問題数（1〜10問）
      "details": "",      // 詳細条件（特定トピックや要求）
      "constraints": "",  // 制約条件（オプション）
      "visualization": {} // 視覚化要素の指定（オプション）
    }
    
    ```
    
- 未入力項目の検出と入力プロンプト生成
- 入力完了時の問題生成エージェントへの引き渡し

### 3.3 問題生成機能

- JSONフォーマットの問題仕様に基づく問題生成
- LangGraphによるマルチエージェント連携
    - 問題生成エージェント
    - 検証エージェント
- 指定された難易度と数学分野に合った問題と解答の作成
- 解答は答えだけでなく，その答えに至った過程 (途中式)も作成
- 詳細な数学的条件に基づく問題作成機能

### 3.4 検証機能

- 生成された問題の多角的検証
- 難易度・分野の適合性検証
- 数学的正確性と解答の完全性検証
- 日本語表現と数式表記の品質検証
- 図形・グラフの整合性検証
- LangGraphのフィードバックループによる問題の自動改善

### 3.5 グラフ・図形生成機能

- 数学問題に必要なグラフや図形の自動生成
- 関数グラフ、幾何図形、統計グラフなど多様な視覚表現
- 問題内容に合わせた適切な視覚化
- 協調型アプローチによる実装:
    - 問題生成エージェント: 図形の数学的仕様決定と中間表現生成
    - TeX整形エージェント: 中間表現からのTeX図形コード生成

### 3.6 TeX/PDF出力機能

- 問題と解答のTeX形式生成
- グラフ・図形を含むTeX文書の構築
- PDFへの変換
- 右側パネルでのリアルタイムプレビュー表示
- ローカルへの保存機能

## 4. 非機能要件

### 4.1 性能要件

- オフライン動作可能（OpenAI API接続のみオンライン）
- 単一ユーザー想定
- 問題生成時間: 60秒以内（図形を含む場合は90秒以内）
- 検証処理時間: 標準問題15秒以内、複雑問題30秒以内

### 4.2 セキュリティ要件

- OpenAI API キーの安全な管理
- 環境変数を使用した機密情報の管理

### 4.3 拡張性要件

- LangGraphによるエージェントの追加・修正の容易性
- 新しい図形タイプの追加容易性
- 検証基準の調整可能性

## 5. LangGraphエージェント設計

### 5.1 エージェントグラフ概要

LangGraphを使用したエージェントグラフを構築し、各エージェントのノードと状態遷移を定義します。

```python
from langgraph.graph import StateGraph, END
import openai
from typing import TypedDict, List, Dict, Any

# 状態定義
class MathProblemState(TypedDict):
    problem_spec: Dict[str, Any]
    chat_history: List[Dict[str, str]]
    current_problem: Dict[str, Any]
    verification_result: Dict[str, Any]
    tex_content: str
    pdf_path: str
    status: str

# グラフ定義
graph = StateGraph(MathProblemState)

# ノード定義と接続
graph.add_node("slot_filling", slot_filling_agent)
graph.add_node("problem_generation", problem_generation_agent)
graph.add_node("verification", verification_agent)
graph.add_node("problem_revision", problem_revision_agent)
graph.add_node("tex_formatting", tex_formatting_agent)
graph.add_node("pdf_generation", pdf_generation_handler)

# エッジ定義（状態遷移）
graph.add_edge("slot_filling", "problem_generation")
graph.add_conditional_edges(
    "verification",
    lambda state: "problem_revision" if state["verification_result"]["overall"] == "fail" else "tex_formatting"
)
graph.add_edge("problem_revision", "verification")
graph.add_edge("tex_formatting", "pdf_generation")
graph.add_edge("pdf_generation", END)

```

### 5.2 各エージェント（ノード）の機能

### 5.2.1 スロットフィリングエージェント

```python
def slot_filling_agent(state: MathProblemState) -> MathProblemState:
    # OpenAI APIを使用したスロットフィリング
    client = openai.OpenAI()

    # 必要なスロットを特定し、ユーザーとの対話を管理
    # 未入力項目がある場合は質問を生成
    # すべての項目が埋まれば完了

    # 状態更新
    return {
        **state,
        "problem_spec": updated_spec,
        "chat_history": updated_history,
        "status": "slots_filled" if all_slots_filled else "in_progress"
    }

```

### 5.2.2 問題生成エージェント

```python
def problem_generation_agent(state: MathProblemState) -> MathProblemState:
    # 問題仕様に基づく問題と解答の生成
    problem_spec = state["problem_spec"]

    # OpenAI APIで問題生成
    client = openai.OpenAI()
    response = client.chat.completions.create(
        model="gpt-4-0125-preview",
        messages=[
            {"role": "system", "content": "数学問題生成エージェントとして機能します..."},
            {"role": "user", "content": f"以下の仕様に基づいて数学問題を生成してください: {problem_spec}"}
        ],
        temperature=0.7
    )

    # 問題、解答、図形中間表現を生成

    return {
        **state,
        "current_problem": {
            "problem_text": problem_text,
            "solution": solution,
            "visualization": visualization_spec
        },
        "status": "problem_generated"
    }

```

### 5.2.3 検証エージェント

```python
def verification_agent(state: MathProblemState) -> MathProblemState:
    # 生成された問題の検証
    problem = state["current_problem"]
    spec = state["problem_spec"]

    # 多角的検証を実行
    verification_result = {
        "overall": "pass" or "fail",
        "aspects": {
            "difficulty": {...},
            "subject": {...},
            "language": {...},
            "solution": {...},
            "visualization": {...}
        }
    }

    return {
        **state,
        "verification_result": verification_result,
        "status": "verified"
    }

```

### 5.2.4 問題修正エージェント

```python
def problem_revision_agent(state: MathProblemState) -> MathProblemState:
    # 検証結果に基づく問題修正
    problem = state["current_problem"]
    verification = state["verification_result"]

    # 修正箇所の特定と修正の実施

    return {
        **state,
        "current_problem": revised_problem,
        "status": "problem_revised"
    }

```

### 5.2.5 TeX整形エージェント

```python
def tex_formatting_agent(state: MathProblemState) -> MathProblemState:
    # 問題と解答のTeX変換
    problem = state["current_problem"]

    # TeXコード生成
    # 図形中間表現からTikZコード生成

    return {
        **state,
        "tex_content": tex_content,
        "status": "tex_formatted"
    }

```

### 5.2.6 PDF生成ハンドラ

```python
def pdf_generation_handler(state: MathProblemState) -> MathProblemState:
    # TeXからPDFへの変換
    tex_content = state["tex_content"]

    # 一時ファイルにTeXを書き出し
    # pdflatexを実行
    # 生成されたPDFのパスを保存

    return {
        **state,
        "pdf_path": pdf_path,
        "status": "completed"
    }

```

## 6. ユーザーストーリー

### ユーザーストーリー1: スロットフィリングによる問題仕様決定

**ユーザーとして**、必要な数学問題の仕様を段階的に指定するために、**AIとの対話を通じて必要な項目を埋めていきたい**。

- 受入基準:
    - 初期入力から問題仕様の一部をJSON形式で保存
    - 空の項目がある場合、その項目の入力を促すメッセージが表示される
    - 入力された情報が適切にJSONに反映される
    - すべての必須項目が埋まったことが確認できる

### ユーザーストーリー2: 詳細条件の指定と反映

**ユーザーとして**、特定の数学的内容に関する問題を得るために、**詳細な条件を指定し、それがJSON形式で保存されることを確認したい**。

- 受入基準:
    - 「二次関数と直線に囲われた部分の面積を求める問題」などの詳細条件がJSONの"details"フィールドに保存される
    - 保存された詳細条件が問題生成に正確に反映される

### ユーザーストーリー3: 図形を含む問題の生成

**ユーザーとして**、視覚的な理解を助けるために、**関数のグラフや幾何図形を含む問題を生成してほしい**。

- 受入基準:
    - 関数の問題には適切なグラフが生成される
    - 図形の問題には正確な図形描画が含まれる
    - 視覚要素が問題内容と整合している
    - 生成された図形が美しく読みやすい

### ユーザーストーリー4: 高品質な問題の保証

**ユーザーとして**、教育目的で使える問題を得るために、**生成された問題が数学的に正確で指定条件に合致していることを確認したい**。

- 受入基準:
    - 問題の難易度が指定と一致している
    - 数学的に正確な問題と解答が提供される
    - 日本語表現が自然で明確である
    - 図形やグラフが問題内容と整合している

### ユーザーストーリー5: 生成結果の確認

**ユーザーとして**、生成された問題を確認するために、**右側パネルでPDFプレビューを表示し、保存できるようにしたい**。

- 受入基準:
    - 生成された問題がPDF形式で右側パネルに表示される
    - PDFに問題と解答が含まれている
    - 図形やグラフが適切に表示される
    - 保存ボタンでPDFをローカルに保存できる

## 7. システム構成

### 7.1 アプリケーション構造

- フロントエンドとバックエンドを統合した単一アプリケーション
- ローカルサーバー起動型
- ブラウザ経由でのUI操作
- Node.js ExpressとPython FastAPI（LangGraphサーバー）の連携

### 7.2 ディレクトリ構造

```
math-problem-generator/
├── client/                     # フロントエンド
│   ├── src/
│   │   ├── components/         # UIコンポーネント
│   │   ├── contexts/           # 状態管理
│   │   └── App.tsx             # メインアプリケーション
│   ├── public/                 # 静的ファイル
│   ├── vite.config.ts          # Vite設定
│   └── package.json            # フロントエンド依存関係
├── server/                     # バックエンド
│   ├── src/                    # Node.js Express
│   │   ├── api/                # APIルート
│   │   ├── services/           # サービス層
│   │   └── utils/              # ユーティリティ
│   ├── agents/                 # Python LangGraph
│   │   ├── graph.py            # LangGraphメイン定義
│   │   ├── agents/             # エージェント実装
│   │   │   ├── slot_filling.py # スロットフィリング
│   │   │   ├── generator.py    # 問題生成
│   │   │   ├── validator.py    # 検証
│   │   │   ├── reviser.py      # 修正
│   │   │   └── formatter.py    # TeX整形
│   │   ├── models/             # データモデル
│   │   ├── prompts/            # プロンプトテンプレート
│   │   └── utils/              # Pythonユーティリティ
│   ├── tex/                    # TeX関連
│   │   ├── templates/          # TeXテンプレート
│   │   └── tikz-helpers/       # TikZ図形生成ヘルパー
│   ├── requirements.txt        # Python依存関係
│   └── package.json            # Node.js依存関係
├── output/                     # 出力ファイル保存ディレクトリ
├── config/                     # 設定ファイル
│   ├── openai.config.js        # OpenAI設定
│   ├── tex.config.js           # TeX設定
│   └── app.config.js           # アプリ設定
├── scripts/                    # 起動スクリプト
│   ├── start.bat               # Windows起動スクリプト
│   └── setup.js                # 初期セットアップスクリプト
├── .env.example                # 環境変数テンプレート
├── package.json                # ルート依存関係
└── tsconfig.json               # TypeScript設定

```

## 8. 起動方法

1. Node.jsとPythonのアプリケーションを統合起動
2. 起動スクリプト（batch file）を用意
3. ブラウザで自動的にローカルホスト（[http://localhost:3000](mdc:http:/localhost:3000)）を開く

## 9. LangGraphワークフロー図

```
+-----------------------------------------------------------+
|                                                           |
|                    LangGraph Workflow                     |
|                                                           |
|  +----------------+                                       |
|  |                |                                       |
|  | スロットフィリング |                                     |
|  | エージェント     |                                       |
|  |                |                                       |
|  +-------+--------+                                       |
|          |                                                |
|          | 問題仕様JSON                                    |
|          v                                                |
|  +----------------+                                       |
|  |                |                                       |
|  | 問題生成        |                                       |
|  | エージェント     |                                       |
|  |                |                                       |
|  +-------+--------+                                       |
|          |                                                |
|          | 問題・解答・図形中間表現                          |
|          v                                                |
|  +----------------+                                       |
|  |                |                                       |
|  | 検証エージェント  |                                       |
|  |                |                                       |
|  +-------+--------+                                       |
|          |                                                |
|          | 検証結果                                        |
|          v                                                |
|      合格?                                                |
|     /     \\                                               |
|   Yes      No                                             |
|   /         \\                                             |
|  |           v                                            |
|  |    +----------------+                                  |
|  |    |                |                                  |
|  |    | 問題修正        |                                  |
|  |    | エージェント     |                                  |
|  |    |                |                                  |
|  |    +-------+--------+                                  |
|  |            |                                           |
|  |            | 修正された問題                             |
|  |            v                                           |
|  |    +----------------+        検証へ戻る                 |
|  |    |                | --------------------------+      |
|  |    | 再検証          |                          |      |
|  |    |                |                          |      |
|  |    +----------------+                          |      |
|  |                                                |      |
|  v                                                v      |
|  +----------------+                       +-------------+ |
|  |                |                       |             | |
|  | TeX整形         |                       | 検証エージェント | |
|  | エージェント      |                       |             | |
|  |                |                       +-------------+ |
|  +-------+--------+                                       |
|          |                                                |
|          | TeXコード                                       |
|          v                                                |
|  +----------------+                                       |
|  |                |                                       |
|  | PDF生成         |                                       |
|  | ハンドラ         |                                       |
|  |                |                                       |
|  +----------------+                                       |
|          |                                                |
|          v                                                |
|       完了状態                                             |
|                                                           |
+-----------------------------------------------------------+

```

## 10. UI設計図

```
+-------------------------------------------------------+
|                                                       |
|  +----------------------------+  +------------------+ |
|  |                            |  |                  | |
|  | AI: どのような数学問題を     |  |                  | |
|  | 生成しますか？              |  |                  | |
|  |                            |  |                  | |
|  | ユーザー: 二次関数の問題    |  |  PDFプレビュー   | |
|  |                            |  |  (問題・解答・   | |
|  | AI: 難易度を教えてください  |  |   図形を含む)    | |
|  | （小学生/中学生/高校生）    |  |                  | |
|  |                            |  |                  | |
|  | ユーザー: 高校生           |  |                  | |
|  |                            |  |                  | |
|  +----------------------------+  |                  | |
|  |                            |  |                  | |
|  |  メッセージ入力エリア        |  |                  | |
|  |                            |  |                  | |
|  +----------------------------+  +------------------+ |
|                                  |  PDF保存ボタン    | |
|                                  +------------------+ |
|                                                       |
+-------------------------------------------------------+

```

## 11. 図形中間表現仕様

図形中間表現は問題生成エージェントから TeX整形エージェントへ図形仕様を伝達するためのJSON形式です。

### 11.1 関数グラフの例

```json
{
  "visualization": {
    "type": "function_graph",
    "functions": [
      {"expression": "x^2", "domain": [0, 5], "style": "blue", "label": "f(x) = x^2"},
      {"expression": "2*x + 5", "domain": [0, 5], "style": "red", "label": "g(x) = 2x + 5"}
    ],
    "highlight_points": [[1, 1], [4, 16]],
    "fill_area": {"between": ["x^2", "2*x + 5"], "domain": [1, 4]},
    "axes": {"xrange": [-1, 6], "yrange": [-1, 15]}
  }
}

```

### 11.2 幾何図形の例

```json
{
  "visualization": {
    "type": "geometric",
    "elements": [
      {"type": "polygon", "points": [[0,0], [4,0], [4,3], [0,3]], "style": "fill=blue!20"},
      {"type": "circle", "center": [2, 1.5], "radius": 1, "style": "draw=red"}
    ],
    "labels": [
      {"position": [0, 0], "text": "A"},
      {"position": [4, 0], "text": "B"}
    ],
    "dimensions": [
      {"from": [0, 0], "to": [4, 0], "text": "4 cm"}
    ]
  }
}

```

## 12. 検証エージェントの検証項目

### 12.1 難易度検証

- 使用数学概念の学年適合性
- 計算複雑性の評価
- 解法テクニックの難易度評価

### 12.2 分野適合性検証

- 問題の数学分野カテゴリ確認
- 指定分野との一致度評価
- 使用数学記号・概念の分野適合性

### 12.3 言語品質検証

- 日本語文法・表現の自然さ
- 数式表記の正確性と一貫性
- 説明の明確さと読みやすさ

### 12.4 解答検証

- 計算結果の正確性
- 解法手順の完全性
- 説明の十分性と教育的価値

### 12.5 図形整合性検証

- 図形と問題内容の整合性
- 図形の数学的正確性
- 視覚的明瞭性

## 13. API連携

### 13.1 Node.js ExpressとPython LangGraphの連携

- Node.js: フロントエンドサービングとPythonサーバーへのプロキシ
- Python: LangGraphエージェント実行とOpenAI API連携

### 13.2 OpenAI API連携

- アシスタントAPIとチャット補完APIの利用
- 適切なプロンプトエンジニアリングによる効率化

## 14. 制約事項と対応策

### 14.1 制約事項

- 非常に複雑な3D図形への対応は限定的
- 図形描画にはTeX環境が適切に設定されている必要がある
- 図形生成には追加の処理時間が必要

### 14.2 対応策

- 必要なTeXパッケージの自動確認と不足パッケージの通知
- 図形の複雑さに応じた処理時間の調整
- 一般的な図形パターンのテンプレート化

## 15. インストールと初期設定手順

### 15.1 前提条件

- Node.js v20.10.0以上
- Python 3.11.0以上
- TeX Live 2023以上
- OpenAI APIキー

### 15.2 セットアップ手順

1. リポジトリのクローンまたはダウンロード
2. ルートディレクトリで `npm install` を実行
3. `cd client && npm install` でフロントエンド依存関係をインストール
4. `cd ../server && npm install` でバックエンド依存関係をインストール
5. `pip install -r requirements.txt` でPython依存関係をインストール
6. `.env.example` を `.env` にコピーし、OpenAI APIキーを設定
7. `npm run setup` で初期セットアップを実行
8. `npm start` または `scripts/start.bat` で起動

## 16. 品質基準

### 16.1 問題品質の評価基準

- 数学的正確性: 100%（必須）
- 難易度適合性: 85%以上
- 言語品質: 90%以上
- 図形品質: 85%以上

### 16.2 パフォーマンス目標

- 標準的な問題生成時間: 60秒以内
- 図形を含む問題: 90秒以内
- 検証処理時間: 標準問題15秒以内、複雑問題30秒以内

この要件定義書は、Windows PC上で動作する数学問題生成AIシステムの基本仕様を定義しています。LangGraphを活用したマルチエージェントアーキテクチャにより、ユーザーとの対話から問題生成、検証、PDF出力までの一連のプロセスを実現します。特に検証エージェントによる多角的な品質検証と、問題生成エージェントとTeX整形エージェントの協調による図形生成機能が本システムの特徴です。

## 重要な注意事項

- 不明点がある場合は、作業開始前に必ず確認を取ってください。
- 重要な判断が必要な場合は、その都度報告し、承認を得てください。
- 予期せぬ問題が発生した場合は、即座に報告し、対応策を提案してください。
- **明示的に指示されていない変更は行わないでください。** 必要と思われる変更がある場合は、まず提案として報告し、承認を得てから実施してください。
- **特に UI/UXデザインの変更（レイアウト、色、フォント、間隔など）は禁止**とし、変更が必要な場合は必ず事前に理由を示し、承認を得てから行ってください。
- **技術スタックに記載のバージョン（APIやフレームワーク、ライブラリ等）を勝手に変更しないでください。** 変更が必要な場合は、その理由を明確にして承認を得るまでは変更を行わないでください。